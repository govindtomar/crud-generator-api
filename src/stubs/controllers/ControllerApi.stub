<?php
namespace App\Http\Controllers{{backslash}}{{namespace}};

use Illuminate\Http\Request;
use App\Http\Controllers\ApiController;
use App\Exceptions\ApiException;
use App\Http\Requests\{{namespace}}\{{modelName}}Request;
use App\Models\{{modelName}};

class {{modelName}}Controller extends ApiController
{
    public function index(Request $request)
    {
        try{
            $per_page = $request->per_page ? $request->per_page : 100;
            ${{modelNamePluralVar}} = {{modelName}}::paginate($per_page);

            return $this->response([
                'status' => $this->getStatusCode(),
                'message' => '{{modelName}} lists',
                'data' =>  ${{modelNamePluralVar}},
            ]);
        }catch(ApiException $e){
            return $this->errorResponse($e->getMessage());
        }
    }

    public function store({{modelName}}Request $request)
    {
        try{
            ${{modelNameSingularVar}} = new {{modelName}};
            {{createControllerFields}}
            ${{modelNameSingularVar}}->save();

            return $this->response([
                'status' => $this->getStatusCode(),
                'message' => 'Save {{modelName}}',
                'data' =>  ${{modelNameSingularVar}},
            ]);
        }catch(ApiException $e){
            return $this->errorResponse($e->getMessage());
        }
    }

    public function show($id)
    {
        try{
            ${{modelNameSingularVar}} = {{modelName}}::find($id);

            return $this->response([
                'status' => $this->getStatusCode(),
                'message' => 'Show {{modelName}}',
                'data' =>  ${{modelNameSingularVar}},
            ]);          
        }catch(ApiException $e){
            return $this->errorResponse($e->getMessage());
        }
    }

    public function update({{modelName}}Request $request)
    {
        try{
            ${{modelNameSingularVar}} =  {{modelName}}::find($request->id);
            {{createControllerFields}}
            ${{modelNameSingularVar}}->save();
            
            return $this->response([
                'status' => $this->getStatusCode(),
                'message' => 'Update {{modelName}}',
                'data' =>  ${{modelNameSingularVar}},
            ]);
        }catch(ApiException $e){
            return $this->errorResponse($e->getMessage());
        }
    }

    public function destroy($id)
    {
        try{
            ${{modelNameSingularVar}} = {{modelName}}::find($id);
            ${{modelNameSingularVar}}->delete();

            return $this->response([
                'status' => $this->getStatusCode(),
                'message' => 'Delete {{modelName}}',
                'data' =>  ${{modelNameSingularVar}},
            ]);
        }catch(ApiException $e){
            return $this->errorResponse($e->getMessage());
        }
    }
    {{createExtraFunctionForToggle}}

}
